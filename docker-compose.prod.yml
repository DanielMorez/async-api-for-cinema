version: '3'
    
services:
  async_api:
    build:
      context: async-api
      dockerfile: Dockerfile
    container_name: async_api
    volumes:
      - ./.env:/opt/app/src/.env
    expose:
      - "${ASYNC_API_PORT}"
    environment:
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - production_network
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy

  auth:
    build:
      context: auth
      dockerfile: Dockerfile
    container_name: auth
    volumes:
      - ./.env:/opt/app/.env
    expose:
      - "${AUTH_PORT}"
    environment:
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - production_network
    depends_on:
      - postgres
      - redis
      - jaeger
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger_async_api
    ports:
      - "${JAEGER_PORT}:${JAEGER_PORT}/udp"
      - "16686:16686"
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: jaeger 

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch_async_api
    healthcheck:
      test: curl -s http://127.0.0.1:${ES_PORT} >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    environment:
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
    expose:
      - "${ES_PORT}"
    networks:
      - production_network
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: async-api-elasticsearch

  redis:
    image: redis:7.0.5
    container_name: redis_async_api
    restart: always
    expose:
      - "${REDIS_PORT}"
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: redis 

  postgres:
    image: postgres:15.1
    container_name: postgres_async_api
    expose:
      - "${PG_PORT}"
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - .:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: redis 

  etl:
    container_name: etl_async_api
    build:
      context: etl/postgres_to_es
      dockerfile: Dockerfile
    volumes:
    - ./.env:/opt/app/.env
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: redis 

  admin_panel:
    container_name: admin_panel_async_api
    build:
      context: admin-panel/movies
      dockerfile: Dockerfile
    expose:
      - "${ADM_PANEL_PORT}"
    restart: always
    volumes:
      - ./.env:/opt/app/.env
      - ./admin-panel/movies/static:/opt/app/static
    environment:
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - postgres
    networks:
      - production_network

  nginx:
    image: nginx:1.23.2
    container_name: nginx_async_api
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs:/etc/nginx/conf.d:ro
      - ./admin-panel/movies/static:/static
      - /tmp/logs/nginx/:/var/log/nginx/
    depends_on:
      - admin_panel
      - async_api
    ports:
      - "80:80"
    networks:
      - production_network
    restart: always

  ugc:
    container_name: ugc
    build:
      context: ugc
      dockerfile: Dockerfile
    expose:
      - "${UGC_PORT}"
    volumes:
      - ./.env:/opt/app/.env
    environment:
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - auth
      - zookeeper
      - broker
      - broker-ui
    restart: always
    networks:
      - production_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    expose:
      - "${ZOOKEEPER_PORT}"
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_PORT}
      - ZOOKEEPER_TICK_TIME=2000
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: zookeeper 

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    restart: always
    expose:
      - "${BROKER_INSIDE_PORT}"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ADVERTISED_HOST_NAME=broker
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=INSIDE://:${BROKER_INSIDE_PORT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://broker:${BROKER_INSIDE_PORT}
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: zookeeper 

  broker-ui:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: broker-ui
    ports:
      - "${BROKER_UI_PORT}:${BROKER_UI_PORT}"
    depends_on:
      - broker
    environment:
      - KAFKA_BROKERCONNECT=broker:${BROKER_INSIDE_PORT}
      - SERVER_PORT=${BROKER_UI_PORT}
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: zookeeper 

  clickhouse:
    image: yandex/clickhouse-server:21.3
    container_name: clickhouse
    expose:
      - "${CLICKHOUSE__PORT}"
      - "${CLICKHOUSE_TCP_PORT}"
    volumes:
      - ./ugc/db/clickhouse/config:/etc/clickhouse-server
    depends_on:
      - zookeeper
    environment:
      - ADMIN_PASSWORD=${CLICKHOUSE__PASSWORD}
      - CLICKHOUSE_LOGGER_LEVEL=debug
      - CLICKHOUSE_HTTP_PORT=${CLICKHOUSE__PORT}
      - CLICKHOUSE_TCP_PORT=${CLICKHOUSE_TCP_PORT}
      - ZOOKEEPER_PORT=${ZOOKEEPER_PORT}
    networks:
      - production_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGS__GELF__PORT}
        tag: zookeeper 

  logs-logstash:
    image: logstash:8.6.2
    container_name: logstash
    environment:
      ES_DSN: "${ES_HOST}:${ES_PORT}"
      GELF_PORT: "${LOGS__GELF__PORT}"
      LOGSTASH_PORT: "${LOGSTASH__PORT}"
      XPACK_MONITORING_ENABLED: "false" 
      pipeline.ecs_compatibility: disabled
    expose:
      - "${LOGSTASH__PORT}/udp"
    ports:
      - "${LOGS__GELF__PORT}:${LOGS__GELF__PORT}/udp"
    volumes:
      - ./logs/logstash.conf:/config/logstash.conf:ro
    command: logstash -f /config/logstash.conf
    networks:
      - production_network

  logs-kibana:
    image: kibana:8.6.2
    container_name: kibana
    ports:
      - "${LOGS__KIBANA__PORT}:${LOGS__KIBANA__PORT}"
    environment:
      ELASTICSEARCH_HOSTS: '["${ES_DSN}"]'
    depends_on:
      - logs-es
    networks:
      - production_network

  logs-filebeat:
    image: elastic/filebeat:8.6.2
    container_name: filebeat
    volumes:
      - /tmp/logs/nginx:/var/log/nginx:ro
      - ./logs/filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - nginx
    links:
      - logs-logstash 
    networks:
      - production_network

  mongo:
    image: mongo:6.0.4
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "9123:9123"
      - "${MONGO_PORT}:${MONGO_PORT}"
    networks:
      - production_network

  rabbitmq:
    image: rabbitmq:3.9
    container_name: rabbitmq
    restart: always
    expose:
      - "${RABBITMQ_PORT}"
    ports:
      - "5672:5672"
    networks:
      - development_network

  notification-api:
    container_name: notification-api
    build:
      context: notification/api
      dockerfile: Dockerfile
    restart: always
    expose:
      - "${NOTIFICATION_API_PORT}"
    depends_on:
      - rabbitmq
    networks:
      - production_network

  notification-admin-panel:
    container_name: notification-admin-panel
    build:
      context: notification/admin-panel
      dockerfile: Dockerfile
    restart: always
    expose:
      - "${NOTIFICATION_ADMIN_PORT}"
    depends_on:
      - postgres
    networks:
      - production_network

  notification-scheduler:
    container_name: notification-scheduler
    build:
      context: notification/scheduler
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
      - notification-admin-panel
      - notification-api
    networks:
      - production_network

  notification-worker:
    container_name: notification-worker
    build:
      context: notification/worker
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - rabbitmq
      - auth
    networks:
      - production_network

networks:
  production_network:
    name: production_network
    external: false